<script type="text/javascript">
  // Create a queue, but don't obliterate an existing one! After the script has loaded, analytics.js is available as the global variable `analytics`.
  var analytics = analytics || [];
  
  (function () {
  
    // A list of all the methods we want to generate queueing stubs for.
    var methods = [
      'identify', 'track', 'trackLink', 'trackForm', 'trackClick', 'trackSubmit',
      'page', 'pageview', 'ab', 'alias', 'ready', 'group'
    ];
  
    // For each of our methods, generate a queueing method that pushes arrays of
    // arguments onto our `analytics` queue. The first element of the array
    // is always the name of the analytics.js method itself (eg. `track`), so that
    // we know where to replay them when analytics.js finally loads.
    var factory = function (method) {
      return function () {
        analytics.push([method].concat(Array.prototype.slice.call(arguments, 0)));
      };
    };
  
    for (var i = 0; i < methods.length; i++) {
      analytics[methods[i]] = factory(methods[i]);
    }
  
  }());
  
  // Define a method that will asynchronously load analytics.js
  analytics.load = function(callback) {
    // Create an async script element for analytics.js, hosted on your own server
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = '<%= asset_url("analytics.js") %>';

    script.addEventListener('load', function (e) { 
      if(typeof callback == 'function') { 
        callback(e); 
      } 
    }, false);

    // Find the first script element on the page and insert our script next to it.
    var firstScript = document.getElementsByTagName('script')[0];
    firstScript.parentNode.insertBefore(script, firstScript);
  };

  // Load analytics.js asynchronously. Note that the rest of these calls will
  // also be async, since they will follow the loading.
  analytics.load(function () {
    analytics.initialize(<%= providers.to_json.html_safe %>);
    
    analytics.identify('<%= current_user.try(:id) %>')
  });
</script>